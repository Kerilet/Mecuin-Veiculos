{
	"info": {
		"_postman_id": "7ac5d2f5-ebf7-4732-bdf1-cbc435b339e0",
		"name": "Mecuin",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Colors",
			"item": [
				{
					"name": "Create color",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should to create ciano color', () => {",
									"    pm.expect(pm.response.json().title).to.eq('Ciano');",
									"    pm.expect(pm.response.json().id).to.be.greaterThan(5);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"    postman.setEnvironmentVariable(\"colorId\", pm.response.json().id);",
									"});",
									"",
									"pm.test('Status code must be 201', () => {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Ciano\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/colors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"colors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET colors",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get colors must has Branco', () => {",
									"    pm.expect(pm.response.json()[0].title).to.eq('Branco');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/colors",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"colors"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET color",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get colors must has Ciano', () => {",
									"    const colorId = parseInt(postman.getEnvironmentVariable('colorId'));",
									"    pm.expect(pm.response.json().title).to.eq('Ciano');",
									"    pm.expect(pm.response.json().id).to.eq(colorId);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/colors/{{colorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"colors",
								"{{colorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update color",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should update color azul calcinha', () => {",
									"    const colorId = parseInt(postman.getEnvironmentVariable('colorId'));",
									"    pm.expect(pm.response.json().title).to.eq('Azul calcinha');",
									"    pm.expect(pm.response.json().id).to.eq(colorId);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Azul calcinha\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/colors/{{colorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"colors",
								"{{colorId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a color",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should body be empty', () => {",
									"    pm.expect(pm.response.body).to.be.undefined;",
									"});",
									"",
									"pm.test('Status code must be 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/colors/{{colorId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"colors",
								"{{colorId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Versions",
			"item": [
				{
					"name": "Create version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should to create Supreme version', () => {",
									"    pm.expect(pm.response.json().title).to.eq('Supreme');",
									"    pm.expect(pm.response.json().id).to.be.greaterThan(5);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"    postman.setEnvironmentVariable(\"versionId\", pm.response.json().id);",
									"});",
									"",
									"pm.test('Status code must be 201', () => {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Supreme\",\n    \"modelId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/versions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET versions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get versions must be Way 13', () => {",
									"    pm.expect(pm.response.json()[0].title).to.eq('Way 13');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/versions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"versions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get versions must has Supreme', () => {",
									"    const versionId = parseInt(postman.getEnvironmentVariable('versionId'));",
									"    pm.expect(pm.response.json().id).to.eq(versionId);",
									"    pm.expect(pm.response.json().title).to.eq('Supreme');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/versions/{{versionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"versions",
								"{{versionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should update version Supreme', () => {",
									"    const versionId = parseInt(postman.getEnvironmentVariable('versionId'));",
									"    pm.expect(pm.response.json().id).to.eq(versionId);",
									"    pm.expect(pm.response.json().title).to.eq('Made in Heaven');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Made in Heaven\",\n    \"modelId\": 2\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/versions/{{versionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"versions",
								"{{versionId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should body be empty', () => {",
									"    pm.expect(pm.response.body).to.be.undefined;",
									"});",
									"",
									"pm.test('Status code must be 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/versions/{{versionId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"versions",
								"{{versionId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Brands",
			"item": [
				{
					"name": "Create brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should to create Hyundai brand', () => {",
									"    pm.expect(pm.response.json().title).to.eq('Hyundai');",
									"    pm.expect(pm.response.json().id).to.be.greaterThan(5);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"    postman.setEnvironmentVariable(\"brandId\", pm.response.json().id);",
									"});",
									"",
									"pm.test('Status code must be 201', () => {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Hyundai\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/brands",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET brands",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get colors must has Fiat', () => {",
									"    pm.expect(pm.response.json()[0].title).to.eq('Fiat');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/brands",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"brands"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get brand must have Hyundai', () => {",
									"    const brandId = parseInt(postman.getEnvironmentVariable('brandId'));",
									"    pm.expect(pm.response.json().id).to.eq(brandId);",
									"    pm.expect(pm.response.json().title).to.eq('Hyundai');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/brands/{{brandId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"brands",
								"{{brandId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should update brand Hyundai', () => {",
									"    const brandId = parseInt(postman.getEnvironmentVariable('brandId'));",
									"    pm.expect(pm.response.json().id).to.eq(brandId);",
									"    pm.expect(pm.response.json().title).to.eq('Killer Queen');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Killer Queen\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/brands/{{brandId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"brands",
								"{{brandId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a brand",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should body be empty', () => {",
									"    pm.expect(pm.response.body).to.be.undefined;",
									"});",
									"",
									"pm.test('Status code must be 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/brands/{{brandId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"brands",
								"{{brandId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Gearshifts",
			"item": [
				{
					"name": "Create gearshift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should to create AutoV2 gearshift', () => {",
									"    pm.expect(pm.response.json().title).to.eq('AutoV2');",
									"    pm.expect(pm.response.json().id).to.be.greaterThan(5);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"    postman.setEnvironmentVariable(\"gearshiftId\", pm.response.json().id);",
									"});",
									"",
									"pm.test('Status code must be 201', () => {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"AutoV2\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/gearshifts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"gearshifts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET gearshifts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get colors must has Automático', () => {",
									"    pm.expect(pm.response.json()[0].title).to.eq('Automático');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/gearshifts",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"gearshifts"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET gearshift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get colors must has AutoV2', () => {",
									"    const gearshiftId = parseInt(postman.getEnvironmentVariable('gearshiftId'));",
									"    pm.expect(pm.response.json().id).to.eq(gearshiftId);",
									"    pm.expect(pm.response.json().title).to.eq('AutoV2');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/gearshifts/{{gearshiftId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"gearshifts",
								"{{gearshiftId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update gearshift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should update gearshift AutoV2', () => {",
									"    const gearshiftId = parseInt(postman.getEnvironmentVariable('gearshiftId'));",
									"    pm.expect(pm.response.json().id).to.eq(gearshiftId);",
									"    pm.expect(pm.response.json().title).to.eq('Dirty Deeds Done Dirt Cheap');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Dirty Deeds Done Dirt Cheap\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/gearshifts/{{gearshiftId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"gearshifts",
								"{{gearshiftId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a gearshift",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should body be empty', () => {",
									"    pm.expect(pm.response.body).to.be.undefined;",
									"});",
									"",
									"pm.test('Status code must be 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/gearshifts/{{gearshiftId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"gearshifts",
								"{{gearshiftId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Models",
			"item": [
				{
					"name": "Create model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should to create Chronos model', () => {",
									"    pm.expect(pm.response.json().title).to.eq('Chronos');",
									"    pm.expect(pm.response.json().id).to.be.greaterThan(5);",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"    postman.setEnvironmentVariable(\"modelId\", pm.response.json().id);",
									"});",
									"",
									"pm.test('Status code must be 201', () => {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"Chronos\",\n    \"brandId\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/models",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET models",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get models must has Uno', () => {",
									"    pm.expect(pm.response.json()[0].title).to.eq('Uno');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/models",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"models"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Get model must have Chronos', () => {",
									"    const modelId = parseInt(postman.getEnvironmentVariable('modelId'));",
									"    pm.expect(pm.response.json().id).to.eq(modelId);",
									"    pm.expect(pm.response.json().title).to.eq('Chronos');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/models/{{modelId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"models",
								"{{modelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should update model Chronos', () => {",
									"    const modelId = parseInt(postman.getEnvironmentVariable('modelId'));",
									"    pm.expect(pm.response.json().id).to.eq(modelId);",
									"    pm.expect(pm.response.json().title).to.eq('King Crimson');",
									"    pm.expect(pm.response.json().createdAt).to.be.a('string');",
									"});",
									"",
									"pm.test('Status code must be 200', () => {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\": \"King Crimson\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3002/models/{{modelId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"models",
								"{{modelId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete a model",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should body be empty', () => {",
									"    pm.expect(pm.response.body).to.be.undefined;",
									"});",
									"",
									"pm.test('Status code must be 204', () => {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "http://localhost:3002/models/{{modelId}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3002",
							"path": [
								"models",
								"{{modelId}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}